{{define "base"}}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>This is the title of the page</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.1/dist/css/datepicker.min.css">    
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

</head>

<body>

    <nav class="navbar sticky-top navbar-expand-lg bg-dar bg-body-tertiary" data-bs-theme="dark">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">Navbar</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about">About</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/contact">Contact</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                Holiday Homes
                </a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="/eremite">Eremite (2 BR)</a></li>
                  <li><a class="dropdown-item" href="/couple">Couple plus (3 BR)</a></li>
                  <li><a class="dropdown-item" href="/family">Family & Friends (5 BR)</a></li>
                </ul>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/reservation">Book Now!</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
        {{block "content" .}}

        {{end}}

        <div class="row sticky-bottom bb-footer">
            <div class="col">
                Left
            </div>
            <div class="col">
                Middle
            </div>
            <div class="col">
                Right
            </div>
        </div>
    
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.1/dist/js/datepicker-full.min.js"></script>
        <script src="https://unpkg.com/notie"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        {{block "js" .}}

        {{end}}
    
        <script>
          let attention = Prompt();
    
          // Example starter JavaScript for disabling form submissions if there are invalid fields
          (() => {
            'use strict'
    
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')
    
            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
              form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                  event.preventDefault()
                  event.stopPropagation()
                }
    
                form.classList.add('was-validated')
              }, false)
            })
          })()
      
          function notify(msg, msgType) {
           notie.alert({
            type: msgType,
            text: msg,
           })
          }
    
          function notifyModal(title, text, icon, confirmationButtonText) {
            Swal.fire({
              icon: icon,
              title: title,
              html: text,
              confirmButtonText: confirmationButtonText,
            })
          }
    
          function Prompt() {
    
            let toast = function(c) {
              const{
                msg = '',
                title = '',
                footer = '',
              } = c; 
    
              const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                  toast.addEventListener('mouseenter', Swal.stopTimer)
                  toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
              })
    
              Toast.fire({
                icon: 'success',
                title: title,
                text: msg,
                footer: footer,
              })
            }
    
            let success = function(c) {
              const {
                msg = '',
                title = '',
                footer = '',
              } = c;
    
              Swal.fire({
                icon: 'success',
                title: title,
                text: msg,
                footer: footer,
              })
            }
    
            let error = function(c) {
              const {
                msg = '',
                title = '',
                footer = '',
              } = c;
    
              Swal.fire({
                icon: 'error',
                title: title,
                text: msg,
                footer: footer,
              })
            }
    
            async function custom(c) {
              const {
                    msg = "",
                    title = ""
                } = c;
    
              const { value: formValues } = await Swal.fire({
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                willOpen: () => {
                  const elem = document.getElementById("reservation-dates-modal");
                  const rp = new DateRangePicker(elem, {
                    format: 'yyyy-mm-dd',
                    showOnFocus: true,
                  })
                },
                didOpen: () => {
                  document.getElementById('start').removeAttribute("disabled"),
                  document.getElementById('end').removeAttribute("disabled");
                },
                preConfirm: () => {
                  return [
                    document.getElementById('start').value,
                    document.getElementById('end').value
                  ]
                }
              })
    
              if (formValues) {
                Swal.fire(JSON.stringify(formValues))
              }
            }
    
            return {
              toast: toast,
              success: success,
              error: error,
              custom: custom,
            }
          }
    
        </script>
      
    </body>
    
    </html>
    
{{end}}